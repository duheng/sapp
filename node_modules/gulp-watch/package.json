{
  "name": "gulp-watch",
  "version": "0.5.2",
  "description": "Watch, that actually is an endless stream",
  "main": "index.js",
  "keywords": [
    "gulp",
    "watch",
    "gulpplugin"
  ],
  "scripts": {
    "test": "istanbul test _mocha --report html -- test/*-test*.js -R spec -t 5000",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- test/*-test.js test/*-tests.js -R spec -t 5000 && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/floatdrop/gulp-watch.git"
  },
  "author": {
    "name": "Vsevolod Strukchinsky"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/floatdrop/gulp-watch/issues"
  },
  "devDependencies": {
    "gulp-mocha": "~0.2.0",
    "mocha": "~1.14.0",
    "coveralls": "~2.6.0",
    "mocha-lcov-reporter": "0.0.1",
    "istanbul": "~0.1.44",
    "gulp-plumber": "~0.2.3",
    "longjohn": "~0.2.2",
    "event-stream": "~3.0.20",
    "gulp-grep-stream": "0.0.1",
    "gulp-sass": "~0.4.0",
    "async": "~0.2.9",
    "hashdir": "0.0.1",
    "rimraf": "~2.2.6",
    "gulp": "~3.3.4",
    "touch": "0.0.2",
    "glob-stream": "~3.1.7",
    "should": "~3.0.1"
  },
  "dependencies": {
    "gulp-batch": "~0.4",
    "gulp-util": "~2.2.6",
    "vinyl-fs": "~0.1.0",
    "glob2base": "~0.0.8",
    "minimatch": "~0.2.14",
    "gaze": "~0.5.0"
  },
  "engine": "node >= 0.10",
  "readme": "# [gulp](https://github.com/gulpjs/gulp)-watch [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status](https://coveralls.io/repos/floatdrop/gulp-watch/badge.png)](https://coveralls.io/r/floatdrop/gulp-watch) [![Dependency Status][depstat-image]][depstat-url]\n> Watch, that actually is an endless stream\n\nThis is implementation of [`gulp.watch`](https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-cb) with endless stream approach. If `gulp.watch` is working for you - stick with it, otherwise you can try `gulp-watch` plugin.\n\nMain reasons of `gulp-watch` existance is that it can easly (with a little help of [`gulp-plumber`](https://github.com/floatdrop/gulp-plumber) achieve per-file rebuilding on file change:\n\n![Awesome demonstration](https://github.com/floatdrop/gulp-watch/raw/master/img/2014-01-09.gif)\n\n## Usage\n\n### Batching mode\n\nThis is close to bundled `gulp.watch`, but with some tweaks. First - files will be grouped by timeout of `200` and passed into stream inside callback (this will keep `git checkout` commands do rebuilding only once). Second - callbacks will __never__ run parallel (unless you remove `return`), until one stream ends working.\n\n```js\nvar gulp = require('gulp'),\n    watch = require('gulp-watch');\n\ngulp.task('default', function () {\n    gulp.src('scss/**/*.scss')\n        .pipe(watch(function(files) {\n            return files.pipe(sass())\n                .pipe(gulp.dest('./dist/'));\n        }));\n});\n```\n\nIf you want to watch all directories, include those, which will be __created__ after:\n\n```js\nvar gulp = require('gulp'),\n    watch = require('gulp-watch');\n\ngulp.task('default', function () {\n\twatch({glob: 'scss/**/*.scss'}, function(files) {\n        return files.pipe(sass())\n            .pipe(gulp.dest('./dist/'));\n    });\n});\n```\n\n### Continuous stream of events\n\nThis is usefull, when you want blazingly fast rebuilding per-file.\n\n__Be aware:__ `end` event is never happens in this mode, so plugins dependent on it will never print or do whatever they should do on `end` task.\n\n```js\n// npm i gulp gulp-watch gulp-sass\n\nvar gulp = require('gulp'),\n    watch = require('gulp-watch'),\n    plumber = require('gulp-plumber'),\n    sass = require('gulp-sass');\n\ngulp.task('default', function () {\n    gulp.src('scss/**', { read: false })\n        .pipe(watch())\n        .pipe(plumber()) // This will keeps pipes working after error event\n        .pipe(sass())\n        .pipe(gulp.dest('./dist/'));\n});\n```\n\nIf you want to watch all directories, include those, which will be __created__ after:\n\n```js\ngulp.task('default', function () {\n    watch({ glob: 'sass/**/*.scss' })\n        .pipe(plumber())\n        .pipe(sass())\n        .pipe(gulp.dest('./dist/'));\n});\n```\n\n### Trigger for mocha\n\n[Problem with `gulp.watch`](https://github.com/gulpjs/gulp/issues/80) is that will run your test suit on every changed file per once. To avoid this [`gulp-batch`](https://github.com/floatdrop/gulp-batch) was written first, but after some time it became clear, that `gulp.watch` should be a plugin with event batching abilities.\n\n```js\nvar grep = require('gulp-grep-stream');\nvar mocha = require('gulp-mocha');\nvar plumber = require('gulp-plumber');\n\ngulp.task('watch', function() {\n    gulp.src(['lib/**', 'test/**'], { read: false })\n        .pipe(watch({ emit: 'all' }, function(files) {\n            files\n                .pipe(grep('*/test/*.js'))\n                .pipe(mocha({ reporter: 'spec' }))\n                .on('error', function() {\n                    if (!/tests? failed/.test(err.stack)) {\n                        console.log(err.stack);\n                    }\n                })\n        }));\n});\n\ngulp.task('default', function () {\n    gulp.run('watch');\n});\n\n// run `gulp watch` or just `gulp` for watching and rerunning tests\n```\n\n## API\n\n### watch([options, callback])\n\nThis function creates have two different modes, that are depends on have you provice callback function, or not. If you do - you get __batched__ mode, if you not - you get __stream__.\n\n### Callback signature: `function(events, [done])`\n\n * `events` - is `Stream` of incoming events.\n * `done` - is callback for your function signal to batch, that you are done. This allows to run your callback as soon as previous end.\n\n### Options:\n\nThis object passed to [`gaze` options](https://github.com/shama/gaze#properties) directly, so see documentation there. For __batched__ mode we are using [`gulp-batch`](https://github.com/floatdrop/gulp-batch#api), so options from there are available. And of course options for [`gulp.src`](https://github.com/gulpjs/gulp#gulpsrcglobs-options) used too. If you do not want content from watch, then add `read: false` to options object.\n\n#### options.emit\nType: `String`\nDefault: `one`\n\nThis options defines emit strategy:\n\n * `one` - emit only changed file\n * `all` - emit all watched files (and folders), when one changes\n\n#### options.passThrough\nType: `Boolean`  \nDefault: `true`\n\nThis options will pass vinyl objects, that was piped into `watch` to next Stream in pipeline.\n\n#### options.glob\nType: `String`  \nDefault: `undefined`\n\nIf you want to detect new files, then you have to use this option. When `gulp-watch` gets files from `gulp.src` it looses the information about pattern of matching - therefore it can not detect new files.\n\n#### options.emitOnGlob\nType: `Boolean`  \nDefault: `true`\n\nIf `options.glob` is used, gulp-watch, by default, will emit files when beginning to watch them -- much like `gulp.src()`. Otherwise, disable this option.\n\nExample:\n```js\n// gulp-watch will not emit like gulp.src(...)\nwatch({glob:'./src/**/*.md', emitOnGlob: false})\n    .pipe(plumber())\n    .pipe(anotherPlugin(opts))\n    .pipe(gulp.dest('./html'))\n```\n\n#### options.name\nType: `String`  \nDefault: `undefined`\n\nName of the watcher. If it present in options, you will get more readable output:\n\n![Naming watchers](https://github.com/floatdrop/gulp-watch/raw/master/img/naming.png)\n\n#### options.verbose\nType: `Boolean`  \nDefault: `false`\n\nThis options will enable more verbose output (useful for debugging).\n\n### Methods\n\nReturned Stream from constructor have some useful methods:\n\n * `close()` - calling `gaze.close` and emitting `end`, after `gaze.close` is done.\n\n### Events\n\n * `end` - all files are stop being watched.\n * `ready` - just re-emitted event from `gaze`.\n * `error` - when something happened inside callback, you will get notified.\n\n### Properties\n\n * `gaze` - instance of `gaze` in case you want to call it methods (for example `remove`). Be aware __no one guarantee you nothing__ after you hacked on `gaze`.\n\n### Returns\n\nStream, that handles `gulp.src` piping.\n\n# License\n\nMIT (c) 2013 Vsevolod Strukchinsky (floatdrop@gmail.com)\n\n[npm-url]: https://npmjs.org/package/gulp-watch\n[npm-image]: https://badge.fury.io/js/gulp-watch.png\n\n[travis-url]: http://travis-ci.org/floatdrop/gulp-watch\n[travis-image]: https://travis-ci.org/floatdrop/gulp-watch.png?branch=master\n\n[depstat-url]: https://david-dm.org/floatdrop/gulp-watch\n[depstat-image]: https://david-dm.org/floatdrop/gulp-watch.png?theme=shields.io\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/floatdrop/gulp-watch",
  "_id": "gulp-watch@0.5.2",
  "dist": {
    "shasum": "a760742d58240741c4623ed49ce3a4ead9dc038e"
  },
  "_from": "gulp-watch@0.5.2",
  "_resolved": "https://registry.npmjs.org/gulp-watch/-/gulp-watch-0.5.2.tgz"
}
